#!/bin/zsh -f

setopt extendedglob
setopt err_exit
umask 022

DOC="\
${0:t} build libobjcryst source bundle from fox-objcryst and cctbx repos.
usage: ${0:t} [options] [N1] [N2] [FIRST-LAST]

With no arguments all build steps are executed in sequence.  Otherwise do
only steps given as arguments, where each argument is a step number or
a range FIRST-LAST.  Use option --list to display step number.

Options:

  --list        show a numbered list of packages and exit
  -h, --help    display this message and exit
"
DOC=${${DOC##[[:space:]]##}%%[[:space:]]##}
MYDIR=${0:A:h}
BASEDIR=${MYDIR:h}
BDIR=${BASEDIR}/build

# Upstream code repositories -------------------------------------------------

# URLs to source code bundles as (directory, URL)
tarballs=(
    cctbx
        http://cci.lbl.gov/cctbx_build/results/2013_07_05_0005/cctbx_bundle.tar.gz
    newmat
        http://www.robertnz.net/ftp/newmat11.tar.gz
)

# Subversion repositories as (targetpath, URL)
svnrepos=(
    ObjCryst
        https://svn.code.sf.net/p/objcryst/code/trunk/ObjCryst
)

# Parse Options --------------------------------------------------------------

zmodload zsh/zutil
zparseopts -K -E -D \
    h=opt_help -help=opt_help l=opt_list -list=opt_list

if [[ -n ${opt_help} ]]; then
    print -r -- $DOC
    exit
fi

typeset -U selection
for n; do
    if [[ $n == [[:digit:]]##-[[:digit:]]## ]]; then
        selection=( $selection {${n%%-*}..${n##*-}} )
    else
        selection=( $selection $n )
    fi
done

# Define functions used in build steps ---------------------------------------

integer BIDX=0

ListSkipOrBuild() {
    local name=${1?}
    (( ++BIDX ))
    if [[ -n ${selection} && -z ${(M)selection:#${BIDX}} ]]; then
        return 0
    fi
    if [[ -n ${opt_list} ]]; then
        print $BIDX $name
        return 0
    fi
    local dashline="# $BIDX $name ${(l:80::-:):-}"
    print ${dashline[1,78]}
    # return false status to trigger the build section
    return 1
}


fetchtarball() {
    [[ $# == 2 ]] || exit $?
    local tgtdir=$1 url=$2
    if [[ -f ${tgtdir}/${url:t} ]]; then
        return
    fi
    mkdir -p $tgtdir
    ( cd $tgtdir && wget -N $url && tar xzf ${url:t} )
}


fetchsvnrepository() {
    [[ $# == 2 ]] || exit $?
    local tgtdir=$1 url=$2
    svn checkout $url $tgtdir
}

# Build commands here --------------------------------------------------------

cd $BASEDIR

ListSkipOrBuild "fetch sources" || (
    cd $BDIR
    for t u in $svnrepos;  fetchsvnrepository $t $u
    for t u in $tarballs;  fetchtarball $t $u
)

ListSkipOrBuild "configure cctbx" || {
    mkdir -p ${BDIR}/cctbx/cctbx_build
    cctbx_configargs=(
        --no-bin-python
        # 2013-10-30 PJ:
        # cctbx Python extensions get linked to included boost_python, not
        # sure if it is possible to link with the system boost_python.
        # For now the build of extensions is disabled.
        --build-boost-python-extensions=False
        mmtbx libtbx cctbx iotbx fftw3tbx rstbx spotfinder
        smtbx mmtbx cbflib clipper
    )
    cd ${BDIR}/cctbx/cctbx_build
    python ../cctbx_sources/libtbx/configure.py $cctbx_configargs
}

ListSkipOrBuild "create bundle branch" || {
    exit
    CCTBXBDIR=${SRCDIR}/cctbx/cctbx_build
    cd $PYTHONDIR
    cctbxpth="$(<cctbx.pth)"
    lines=( ${(f)cctbxpth} )
    if [[ -n ${(M)lines:#/*} ]]; then
        lines[1]="import os; os.environ.setdefault('LIBTBX_BUILD', os.path.abspath(os.path.dirname(fullname) + '$($RELPATH $CCTBXBDIR .)'))"
        lines=( ${lines[1]} ${(f)"$($RELPATH ${lines[2,-1]} .)"} )
        print -l ${lines} >| cctbx.pth
    fi
}

