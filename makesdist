#!/bin/zsh -f

setopt extendedglob
setopt err_exit
umask 022

DOC="\
${0:t} build libobjcryst source bundle from fox-objcryst and cctbx repos.
usage: ${0:t} [options] [N1] [N2] [FIRST-LAST]

With no arguments all build steps are executed in sequence.  Otherwise do
only steps given as arguments, where each argument is a step number or
a range FIRST-LAST.  Use option --list to display step number.

Options:

  --list        show a numbered list of packages and exit
  -h, --help    display this message and exit
"
DOC=${${DOC##[[:space:]]##}%%[[:space:]]##}
MYDIR=${0:A:h}
BASEDIR=${MYDIR:h}
BDIR=${BASEDIR}/build

# Upstream code repositories -------------------------------------------------

# URLs to source code bundles as (directory, URL)
tarballs=(
    cctbx
        http://cci.lbl.gov/cctbx_build/results/2013_07_05_0005/cctbx_bundle.tar.gz
    newmat
        http://www.robertnz.net/ftp/newmat11.tar.gz
)

# Subversion repositories as (targetpath, URL)
svnrepos=(
    ObjCryst
        https://svn.code.sf.net/p/objcryst/code/trunk/ObjCryst
)

# Parse Options --------------------------------------------------------------

zmodload zsh/zutil
zparseopts -K -E -D \
    h=opt_help -help=opt_help l=opt_list -list=opt_list

if [[ -n ${opt_help} ]]; then
    print -r -- $DOC
    exit
fi

typeset -U selection
for n; do
    if [[ $n == [[:digit:]]##-[[:digit:]]## ]]; then
        selection=( $selection {${n%%-*}..${n##*-}} )
    else
        selection=( $selection $n )
    fi
done

# Define functions used in build steps ---------------------------------------

integer BIDX=0

ListSkipOrBuild() {
    local name=${1?}
    (( ++BIDX ))
    if [[ -n ${selection} && -z ${(M)selection:#${BIDX}} ]]; then
        return 0
    fi
    if [[ -n ${opt_list} ]]; then
        print $BIDX $name
        return 0
    fi
    local dashline="# $BIDX $name ${(l:80::-:):-}"
    print ${dashline[1,78]}
    # return false status to trigger the build section
    return 1
}


fetchtarball() {
    [[ $# == 2 ]] || exit $?
    local tgtdir=$1 url=$2
    if [[ -f ${tgtdir}/${url:t} ]]; then
        return
    fi
    mkdir -p $tgtdir
    ( cd $tgtdir && curl -z ${url:t} -O $url && tar xzf ${url:t} )
}


fetchsvnrepository() {
    [[ $# == 2 ]] || exit $?
    local tgtdir=$1 url=$2
    svn checkout --quiet $url $tgtdir
}


typeset -aU cctbx_sources
assign_cctbx_sources() {
    [[ 0 == ${#cctbx_sources} ]] || return
    local lines
    pushd ${BDIR}/cctbx/cctbx_build
    lines=( ${(f)"$(bin/libtbx.scons -n --tree=all lib/libcctbx.a)"} )
    lines=( ${${(M)lines:#*+-*.(h|cpp)}#*+-} )
    cctbx_sources=( $lines )
    cctbx_sources=(
        {.,../cctbx_sources}/${^${cctbx_sources:#/*}}(N-.:a)
        ${(M)cctbx_sources:#/*}
    )
    popd
    # explicitly exclude unnecessary sources
    cctbx_sources=( ${cctbx_sources:#*/eltbx/electron_scattering*} )
}

# Build commands here --------------------------------------------------------

cd $BASEDIR

ListSkipOrBuild "fetch sources" || (
    mkdir -p $BDIR
    cd $BDIR
    for t u in $svnrepos;  fetchsvnrepository $t $u
    for t u in $tarballs;  fetchtarball $t $u
)


ListSkipOrBuild "configure cctbx" || {
    mkdir -p ${BDIR}/cctbx/cctbx_build
    # minimum configuration that generates all files used in ObjCryst
    cctbx_configargs=(
        --no-bin-python
        --build-boost-python-extensions=False
        cctbx
    )
    cd ${BDIR}/cctbx/cctbx_build
    python ../cctbx_sources/libtbx/configure.py $cctbx_configargs
    # compile one file to make "scons -n" work in assign_cctbx_sources
    bin/libtbx.scons cctbx/uctbx/uctbx.o
}


ListSkipOrBuild "create bundle branch" || {
    GITLASTCOMMIT=$(cd $BASEDIR && git rev-parse HEAD)
    cd ${BDIR}
    if [[ ! -d libfox ]]; then
        git clone ${BASEDIR} libfox
    fi
    cd libfox
    git checkout -B bundle
    # objcryst
    objcryst_exclude=(
        /doc  /example  /wxCryst
        Makefile  '*.mak' '.cvs*'
    )
    rsync -a --delete --delete-excluded \
        --exclude=${^objcryst_exclude} --cvs-exclude \
        --link-dest=${BDIR}/ObjCryst ${BDIR}/ObjCryst/ src/ObjCryst/
    # newmat
    rsync -a --delete \
        --link-dest=${BDIR}/newmat ${BDIR}/newmat/ src/newmat/
    # cctbx
    assign_cctbx_sources
    for f in $cctbx_sources; do
        if [[ $f == ${BDIR}/*/include/*.h ]]; then
            t=src/cctbx/include/${f##*/include/}
        elif [[ $f == *.h ]]; then
            t=src/cctbx/include/${f##${BDIR}*cctbx_(build|sources)/}
        else
            t=src/cctbx/${f##${BDIR}*cctbx_(build|sources)/}
        fi
        test -d ${t:h} || mkdir -p ${t:h}
        ln -f $f $t
    done
    ln -f ${BDIR}/cctbx/cctbx_sources/cctbx/*.txt src/cctbx/
    # Commit bundle branch
    git add --all src
    if ! git diff --cached --quiet; then
        git commit -m "Bundle generated from scripts at $GITLASTCOMMIT."
    fi
    git push -f ${BASEDIR}/.git bundle:bundle
}
